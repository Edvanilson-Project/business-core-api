import { BaseEntity } from 'src/common/entities/base.entity';
import { EmployeePosition } from '../../employee-position/entities/employee-position.entity';
import { Column, Entity, OneToMany } from 'typeorm';
import { EmployeeLocation } from 'src/employee-location/entities/employee-location.entity';

@Entity()
export class Employee extends BaseEntity {
  // ============================
  // üìå Identifica√ß√£o principal
  // ============================

  @Column({ type: 'int', unique: true, nullable: false })
  registrationNumber: number; // N√∫mero de registro do funcion√°rio (matr√≠cula)

  @Column({ type: 'varchar', length: 100, nullable: false })
  name: string; // Nome completo do funcion√°rio

  @Column({ type: 'varchar', length: 255, unique: true, nullable: false })
  email: string; // E-mail corporativo

  @Column({ type: 'varchar', length: 14, unique: true, nullable: false })
  cpf: string; // CPF (Cadastro de Pessoa F√≠sica)

  @Column({ type: 'varchar', length: 12, unique: true, nullable: true })
  rg?: string; // RG (Registro Geral)

  @Column({ type: 'varchar', length: 20, nullable: true })
  issuingAuthority?: string; // √ìrg√£o emissor do RG

  @Column({ type: 'varchar', length: 11, nullable: true })
  pis?: string; // PIS (Programa de Integra√ß√£o Social)

  // ============================
  // üìÑ Documentos Trabalhistas
  // ============================

  @Column({ type: 'varchar', length: 20, nullable: true })
  workCardNumber?: string; // N√∫mero da carteira de trabalho

  @Column({ type: 'varchar', length: 10, nullable: true })
  workCardSeries?: string; // S√©rie da carteira de trabalho

  // ============================
  // üë§ Informa√ß√µes Pessoais
  // ============================

  @Column({ type: 'varchar', length: 50, nullable: true })
  nationality?: string; // Nacionalidade

  @Column({ type: 'date', nullable: true })
  birthDate?: Date; // Data de nascimento

  @Column({ type: 'varchar', length: 50, nullable: true })
  maritalStatus?: string; // Estado civil

  @Column({ type: 'varchar', length: 50, nullable: true })
  educationLevel: string; // N√≠vel de escolaridade

  // ============================
  // üó≥ Outros Documentos
  // ============================

  @Column({ type: 'varchar', length: 20, nullable: true })
  voterRegistration?: string; // T√≠tulo de eleitor

  @Column({ type: 'varchar', length: 20, nullable: true })
  driverLicense?: string; // N√∫mero da CNH

  @Column({ type: 'varchar', length: 2, nullable: true })
  driverLicenseCategory?: string; // Categoria da CNH (A, B, AB, etc.)

  @Column({ type: 'date', nullable: true })
  driverLicenseExpiration?: Date; // Validade da CNH

  // ============================
  // üè† Endere√ßo
  // ============================

  @Column({ type: 'varchar', length: 255, nullable: true })
  address?: string; // Endere√ßo residencial

  @Column({ type: 'varchar', length: 50, nullable: true })
  city?: string; // Cidade

  @Column({ type: 'varchar', length: 50, nullable: true })
  state?: string; // Estado

  // ============================
  // üíµ Dados Banc√°rios
  // ============================

  @Column({ type: 'varchar', length: 50, nullable: true })
  bankName?: string; // Nome do banco

  @Column({ type: 'varchar', length: 20, nullable: true })
  bankAccountNumber?: string; // Conta banc√°ria

  @Column({ type: 'varchar', length: 20, nullable: true })
  bankAgencyNumber?: string; // Ag√™ncia banc√°ria

  // ============================
  // üè• Benef√≠cios
  // ============================

  @Column({ type: 'varchar', length: 50, nullable: true })
  healthInsurance?: string; // Nome do plano de sa√∫de

  // ============================
  // üìÖ Situa√ß√£o contratual
  // ============================

  @Column({ type: 'date', nullable: false })
  hireDate: Date; // Data de admiss√£o

  @Column({ type: 'date', nullable: true })
  terminationDate?: Date; // Data de desligamento (se aplic√°vel)

  @Column({ type: 'boolean', default: true })
  isActive: boolean; // Indica se o funcion√°rio est√° ativo

  // ============================
  // üîÅ Relacionamentos

  @OneToMany(
    () => EmployeePosition,
    (employeePosition) => employeePosition.employee,
  )
  employeePositions: EmployeePosition[]; // Hist√≥rico de cargos/fun√ß√µes do funcion√°rio

  @OneToMany(() => EmployeeLocation, (empLoc) => empLoc.employee)
  employeeLocations: EmployeeLocation[]; // Locais onde o funcion√°rio atua
}
